/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { forkCommand } from './forkCommand.js';\nimport { CommandKind } from './types.js';\nimport { MessageType } from '../types.js';\n\n// Mock the forkInfo module\nvi.mock('../../utils/forkInfo.js', () => ({\n  getForkInfo: vi.fn().mockResolvedValue({\n    name: 'AI CLI',\n    version: '0.1.13-fork.1',\n    originalName: 'Gemini CLI',\n    originalRepo: 'https://github.com/google-gemini/gemini-cli',\n    forkRepo: 'https://github.com/relix42/grooveforge',\n    description: 'Enhanced fork of Gemini CLI with custom AI development features',\n    features: [\n      'Dual binary support (grooveforge and gemini commands)',\n      'Enhanced startup script with dependency checking',\n      'Agent workspace integration'\n    ]\n  }),\n  getEnhancedVersionInfo: vi.fn().mockResolvedValue(\n    'AI CLI v0.1.13-fork.1 (fork of Gemini CLI)\\n\\nDescription: Enhanced fork of Gemini CLI with custom AI development features'\n  )\n}));\n\ndescribe('forkCommand', () => {\n  let mockContext: any;\n\n  beforeEach(() => {\n    mockContext = {\n      ui: {\n        addItem: vi.fn(),\n      },\n      services: {\n        config: {},\n        settings: { merged: {} },\n      },\n    };\n  });\n\n  it('should have correct name and description', () => {\n    expect(forkCommand.name).toBe('fork');\n    expect(forkCommand.description).toBe('show AI CLI fork information and enhancements');\n    expect(forkCommand.kind).toBe(CommandKind.BUILT_IN);\n  });\n\n  it('should execute action and add fork information to UI', async () => {\n    if (!forkCommand.action) {\n      throw new Error('Fork command action is not defined');\n    }\n\n    await forkCommand.action(mockContext, '');\n\n    // Should call addItem twice - once for enhanced info, once for structured info\n    expect(mockContext.ui.addItem).toHaveBeenCalledTimes(2);\n    \n    // Check that both calls include MessageType.TEXT\n    const calls = mockContext.ui.addItem.mock.calls;\n    expect(calls[0][0].type).toBe(MessageType.TEXT);\n    expect(calls[1][0].type).toBe(MessageType.TEXT);\n    \n    // Check that the content includes fork information\n    expect(calls[0][0].text).toContain('AI CLI v0.1.13-fork.1');\n    expect(calls[1][0].text).toContain('ðŸ¤– **AI CLI Fork Details**');\n    expect(calls[1][0].text).toContain('Enhanced fork of Gemini CLI');\n  });\n\n  it('should include repository links in the output', async () => {\n    if (!forkCommand.action) {\n      throw new Error('Fork command action is not defined');\n    }\n\n    await forkCommand.action(mockContext, '');\n\n    const calls = mockContext.ui.addItem.mock.calls;\n    const structuredInfo = calls[1][0].text;\n    \n    expect(structuredInfo).toContain('https://github.com/relix42/grooveforge');\n    expect(structuredInfo).toContain('https://github.com/google-gemini/gemini-cli');\n  });\n\n  it('should include usage instructions', async () => {\n    if (!forkCommand.action) {\n      throw new Error('Fork command action is not defined');\n    }\n\n    await forkCommand.action(mockContext, '');\n\n    const calls = mockContext.ui.addItem.mock.calls;\n    const structuredInfo = calls[1][0].text;\n    \n    expect(structuredInfo).toContain('grooveforge');\n    expect(structuredInfo).toContain('gemini');\n    expect(structuredInfo).toContain('./start_ai_cli.sh');\n  });\n});\n"